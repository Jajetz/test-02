name: "security"

on:
  # Run on pull requests. Returns the results introduced by the pull_request.
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ main ]
  # Run on merges. Return all results.
  push:
    branches: [ main ]
  # Runs at 00:00 UTC on Sat
  schedule:
    - cron: '00 00 * * 6'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Static Application Security Testing (SAST) - CodeQL
  sast-codeql:
    name: sast-codeql
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1


  # Static Application Security Testing (SAST) - semgrep
  sast-semgrep:
    name: sast-semgrep-scan
    runs-on: ubuntu-latest
    # steps: represent a sequence of tasks that will be executed as part of the job
    steps:
      # checkout action: checkout project source under $GITHUB_WORKSPACE
      - name: checkout
        uses: actions/checkout@v1
      # semgrep action: run sast scan
      - name: semgrep-action
        # Scan code using project's configuration on https://semgrep.dev/manage
        uses: returntocorp/semgrep-action@v1
        # Set GITHUB_TOKEN to leave inline comments on your pull requests.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Rules and patterns to search for with semgrep. p/python, p/flask, r/python.flask
          config: r/python.flask
          # Access token to post results to the semgrep app.
          # publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          # Deployment ID on semgrep app.
          # publishDeployment: ${{ secrets.SEMGREP_DEPLOYMENT_ID }}
          # Set to 1 if you want a semgrep.sarif file to be written with all semgrep findings.
          generateSarif: "1"
      # Upload SARIF file generated in previous step          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: semgrep.sarif
        if: always()

  # Static Application Security Testing (SAST) - SonarCloud
  sast-sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.organization=jajetz
          -Dsonar.projectKey=jajetz_test-02
          -Dsonar.test.exclusions=tests/**
          -Dsonar.verbose=true

  # Build
  # Dynamic Application Security Testing (DAST) - OWASP ZAP
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
